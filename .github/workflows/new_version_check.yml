name: release version check

on:
  workflow_call:
    inputs:
      gh_env:
        description: github environment to deploy from
        type: string
        required: true
      release_version:
        description: release tag from github repo published release
        type: string
        required: true
      branch_prefix:
        description: name of new branch to create for changes
        type: string
        required: true
      search_path:
        description: path in which to search for files
        type: string
        required: true
      file_pattern:
        description: pattern against which to mach file names
        type: string
        required: true
      search_pattern:
        description: pattern against which to match a string within a matched file
        type: string
        required: true
      replace_pattern:
        description: pattern against which to match a string within a matched file
        type: string
        required: true
    secrets:
      GH_SVC_TOKEN:
        required: true

jobs:
  release_version_check:
    runs-on: ubuntu-latest
    environment: ${{inputs.gh_env}}
    steps:
      - name: check if branch exists
        id: branch_check
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GH_SVC_TOKEN}}
          script: |
            const new_branch = "heads/${{inputs.branch_prefix}}-${{inputs.release_version}}"
            const matching_branches = github.rest.git.listMatchingRefs({
             owner: context.repo.owner,
             repo: context.repo.repo,
             ref: $new_branch
            })
            console.log(matching_branches.data.length)

      - name: testing
        run: echo ${{ steps.branch_check.stdout }}

      - name: "Checkout ${{inputs.branch_prefix}}-${{inputs.release_version}}"
        id: checkout
        uses: actions/checkout@v3
        with:
          github-token: ${{secrets.GH_SVC_TOKEN}}
          token: ${{secrets.GH_SVC_TOKEN}}

      - name: Check terragrunt.hcl module source versions
        env:
          GITHUB_TOKEN: ${{ secrets.GH_SVC_TOKEN }}
          RELEASE_VERSION: ${{inputs.release_version}}
          SEARCH_PATH: ${{inputs.search_path}}
          FILE_PATTERN: ${{inputs.file_pattern}}
          SEARCH_PATTERN: ${{inputs.search_pattern}}
          REPLACE_PATTERN: ${{inputs.replace_pattern}}
        run: |
          files=$(find "${SEARCH_PATH}" -name "${FILE_PATTERN}")
          for file in $files; do
            echo $file
            sed -i -Ez "s/${SEARCH_PATTERN}/${REPLACE_PATTERN}/" $file
          done

      - name: Stage changes and push to upstream
        env:
          GITHUB_TOKEN: ${{ secrets.GH_SVC_TOKEN }}
          RELEASE_VERSION: ${{inputs.release_version}}
          SEARCH_PATH: ${{inputs.search_path}}
          FILE_PATTERN: ${{inputs.file_pattern}}
        run: |
          files=$(find "${SEARCH_PATH}" -name "${FILE_PATTERN}" |grep -v defaults)
          for file in $files; do
            git config user.name ${{github.actor}}
            git stage $file
            git commit -m "Updated ${file} with target revision ${RELEASE_VERSION}"
          done

      - name: Create PR
        uses: actions/github-script@v6
        env:
          RELEASE_VERSION: ${{inputs.release_version}}
          BRANCH_NAME: ${{inputs.branch_name}}
        with:
          github-token: ${{secrets.GH_SVC_TOKEN}}
          script: |
            github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: context.head_ref
              base: context.base_ref,
              title: "${{steps.checkout.outputs.NEW_BRANCH}}",
              body: "This is an automated PR for updating to ${{env.RELEASE_VERSION}} from github release"
            });
